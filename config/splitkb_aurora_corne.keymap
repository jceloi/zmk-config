/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include "keymap_french.h"

#define L1 0
#define L2 1
#define L3 2
#define L4 3



/*****************************************************************************/
                            /* Home Row Mods */
/*****************************************************************************/

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    /*    ┌────┬────┬────┬────┬────┐                                       */ \
            0    1    2    3    4     5                                       \
    /*    ├────┼────┼────┼────┼────┼────┐                                  */ \
            12   13   14   15   16   17                                      \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
            24   25   26   27   28   29                                       \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
  

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
    /*                                          ┌────┬────┬────┬────┬────┐ */ \
                                             6     7    8    9   10   11      \
    /*                                     ┌────┼────┼────┼────┼────┼────┤ */ \
                                             18   19   20   21   22   23      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
                                             30   31   32   33   34   35      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
    

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS \
    /*                 ┌────┬────┬────┐      ┌────┬────┬────┐              */ \
                         36   37   38          39   40   41                   \
    /*                 ├────┼────┼────┤      ├────┼────┼────┤              */ \


/ {

 behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lh_hm: left_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };  
        rh_hm: right_hand_homerow_mods {    
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
            
        };
        excumflex: excumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCUMFLEX";
            #binding-cells = <0>;
            bindings = <&kp FR_CIRC>, <&kp FR_EXLM>;
            mods = <(MOD_LSFT)>;
        };
        virgpts: virgpts {
            compatible = "zmk,behavior-mod-morph";
            label = "VIRGPTS";
            #binding-cells = <0>;
            bindings = <&kp FR_COMM>, <&kp FR_SCLN>;
            mods = <(MOD_LSFT)>;
        };
        points: points {
            compatible = "zmk,behavior-mod-morph";
            label = "POINTS";
            #binding-cells = <0>;
            bindings = <&kp FR_DOT>, <&kp FR_COLN>;
            mods = <(MOD_LSFT)>;
        };
        questionstrophe: questionstrophe {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTIONSTROPHE";
            #binding-cells = <0>;
            bindings = <&kp FR_QUOT>, <&kp FR_QUES>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {

    };
    combos { 
        compatible = "zmk,combos";

        combo_cut { // KY
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LS(DELETE)>;
        };

        combo_copy { // YÈ
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LC(INSERT)>;
        };

        combo_paste { // È‧
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LS(INSERT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            label = "OPTIMOT";
        
            // -------------------------------------------------------------------------------
            // | TAB  |  à  |  J  |  O  |  é  |  B  |   |  F  |  D  |  L  |  ’? |  Q  |  X   |
            // | ESC  |  A  |  I  |  E  | U/ù |  ,; |   |  P  |  T  |  S  |  R  |  N  |  ^!  |
            // | CTRL |  K  |  Y  |  è  |  .: |  W  |   |  G  | C/ç |  M  |  H  |  V  |  Z   |
            //                  | WIN | SPC | SHIFT |   | BSPC | ENTER | L2 |
           
            
            bindings = <
                &kp TAB     &kp FR_AGRV    &kp J  &kp O        &kp FR_EACU       &kp B           &kp F       &kp D          &kp L       &questionstrophe  &kp FR_Q &kp X
                &kp LCTRL   &kp FR_A       &kp I  &kp E        &ht FR_UGRV U     &virgpts        &kp P       &kp T          &kp S       &kp R             &kp N    &excumflex
                &kp LSHFT   &kp FR_K       &kp Y  &kp FR_EGRV  &points           &kp FR_W        &kp FR_G    &ht FR_CCED C  &kp FR_M    &kp H             &kp V    &kp FR_Z
                                       &kp LWIN &kp SPACE &kp LSHIFT   &kp BSPC &kp ENTER &to L2  
            >;
        };

        symb_layer {
            label = "SYMBOLES";
            // -----------------------------------------------------------------------------------------
            //    |  `  |  @  |  '  |  "  |  *  |   X   |   |  |  |  -   |  _  |  &  |  °  |  BSPC  |
            //    |  ²  |  ~  |  <  |  >  |  =  |   $   |   |  \  |  {   |  }  |  /  |  ¨  |  ENTER |
            //    |  X  |  €  |  #  |  %  |  +  |   X   |   |  [  |  (   |  )  |  ]  |  X  |   L3   |
            //                       | L1 |  X  |   X   |   |  X  |  X   | L4 |
            bindings = < 
               &kp FR_GRV  &kp FR_AT    &kp FR_QUOT  &kp FR_DQUO  &kp FR_ASTR  &trans       &kp FR_PIPE  &kp FR_MINS &kp FR_UNDS &kp FR_AMPR &kp FR_DEG  &kp BSPC
               &kp FR_SUP2 &kp FR_TILD  &kp FR_LABK  &kp FR_RABK  &kp FR_EQL   &kp FR_DLR   &kp FR_BSLS  &kp FR_LCBR &kp FR_RCBR &kp FR_SLSH &kp FR_DIAE &kp ENTER
               &trans      &kp A  &kp FR_HASH  &kp FR_PERC  &kp FR_PLUS  &trans       &kp FR_LBRC  &kp FR_LPRN &kp FR_RPRN &kp FR_RBRC &trans      &to L3
                                                     &to L1 &trans &trans    &trans &trans &to L4
                >;
             };

        nav_layer {
            label = "NAVIG";
            // -----------------------------------------------------------------------------------------
            //                 |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  PUP  |  HOME |  ↑  | END |  X  |  BSPC  |
            //                 |  F7  |  F8 |  F9 | F10 | F11 | F12 |   |  PDN  |   ←   |  ↓  |  →  |  X  |  ENTER |
            //                 | PREV | NEXT| PLAY| VUP | VDWN| MUTE|   |   X   |    X  |  X  |  X  |  X  |    X   |
            //                                         | L1 | X | X |   | ALT | X | L2 |
            bindings = <
               &kp F1     &kp F2     &kp F3   &kp F4        &kp F5        &kp F6      &kp PG_UP   &kp HOME   &kp UP    &kp END   &trans &kp BSPC
               &kp F7     &kp F8     &kp F9   &kp F10       &kp F11       &kp F12     &kp PG_DN   &kp LEFT   &kp DOWN  &kp RIGHT &trans &kp ENTER
               &kp C_PREV &kp C_NEXT &kp C_PP &kp C_VOL_UP  &kp C_VOL_DN  &kp C_MUTE  &trans      &trans     &trans    &trans    &trans &trans
                                                 &to L1 &trans &trans    &kp LALT &trans &to L2
                     >;
                };     

        numpad_layer {
            label = "NUMPAD";
            // -----------------------------------------------------------------------------------------
            //    | X        | X         |  X  |  X  |  X  |   X   |      |  *  |  7   |  8  |  9  |  +   |  BSPC   |
            //    | RGB_TOG  | BACKL_TOG |  X  |  X  |  X  |   X   |      |  =  |  4   |  5  |  6  |  -   |  ENTER  |
            //    |  BTCLR   |     BT 1  | BT 2| BT 3| BT 4|OUT_TOG|      |  0  |  1   |  2  |  3  |  X   |   L3    |
            //                                        | L1 | X | X |      |  X  |  X   | L2 |
            bindings = < 
               &trans             &trans       &trans        &trans       &trans       &trans           &kp FR_ASTR  &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp FR_PLUS   &kp BSPC
               &rgb_ug RGB_TOG    &bl  BL_TOG  &trans        &trans       &trans       &trans           &kp FR_EQL   &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp FR_MINS   &kp ENTER
               &bt BT_CLR         &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &out OUT_TOG     &kp KP_N0    &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT    &to L3
                                                     &to L1 &trans &trans    &trans &trans &to L2
                        >;
                };


    };
};

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>



/*****************************************************************************/
                            /* Home Row Mods */
/*****************************************************************************/

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    /*    ┌────┬────┬────┬────┬────┐                                       */ \
            0    1    2    3    4     5                                       \
    /*    ├────┼────┼────┼────┼────┼────┐                                  */ \
            12   13   14   15   16   17                                      \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
            24   25   26   27   28   29                                       \
    /*    ├────┼────┼────┼────┼────┼────┤                                  */ \
  

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
    /*                                          ┌────┬────┬────┬────┬────┐ */ \
                                             6     7    8    9   10   11      \
    /*                                     ┌────┼────┼────┼────┼────┼────┤ */ \
                                             18   19   20   21   22   23      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
                                             30   31   32   33   34   35      \
    /*                                     ├────┼────┼────┼────┼────┼────┤ */ \
    

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS \
    /*                 ┌────┬────┬────┐      ┌────┬────┬────┐              */ \
                         36   37   38          39   40   41                   \
    /*                 ├────┼────┼────┤      ├────┼────┼────┤              */ \


/ {

 behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lh_hm: left_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };  
        rh_hm: right_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
            
        };
        questionstrophe: questionstrophe {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTIONSTROPHE";
            #binding-cells = <0>;
            bindings = <&kp O>, <&question_end_sentence>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
        excumflex: excumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCUMFLEX";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&excl_end_sentence>;
            mods = <(MOD_LSFT)>;
        };
        dotone: dot_one {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_ONE";
            #binding-cells = <0>;
            bindings = <&dot_end_sentence>, <&dottwo>;
            mods = <(MOD_LSFT|MOD_RALT)>;
        };
        dottwo: dot_two {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_TWO";
            #binding-cells = <0>;
            bindings = <&kp RA(V)>, <&ellips>;
            mods = <(MOD_LSFT)>;
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            label = "OPTIMOT";
           
            // -----------------------------------------------------------------------------------------
            // |  TAB |  à  |  J  |  O  |  é  |  B  |   |  F  |  D  |  L  |  ’  |  Q  | BKSP |
            // | CTRL |  A  |  I  |  E  |  U  |  ,  |   |  P  |  T  |  S  |  R  |  N  |  !   |
            // | SHFT |     |  Y  |  è  |  .  |  k  |   |  G  |  C  |  M  |  H  |  V  |  Z   |
            // 
            
            bindings = <
&kp TAB     &kp N0  &kp J  &kp O    &kp N2     &kp B        &kp F   &kp D          &kp L       &questionstrophe  &kp R  &kp Q
&kp LCTRL   &kp A   &kp I  &kp E    &kp U      &trans       &kp P   &kp T          &kp S       &kp R             &kp N  &excumflex
&kp LSHFT   &kp Y   &kp Y  &dotone  &dotone      &kp K       &kp G   &kp C         &kp COMMA   &kp H             &kp V  &kp Z
                       &kp CAPS &mo NUMPAD &mo NUMROW &kp SPACE  &ht DEL BSPC &kp ENTER
            >;
        };

         numpad_layer {
                        label = "NUMPAD";
// -----------------------------------------------------------------------------------------
//    | ESC | PUP | HOME|  ↑  | END |   B   |   |  =  |  7   |  8  |  9  |  0  |  (  |
//    |  Ê  | PDN |  ←  |  ↓  |  →  |   ,   |   |  *  |  4   |  5  |  6  |  /  |  )  |
//    | TAB | WIN | CUT | CPY | PST | PSCRN |   |  +  |  1   |  2  |  3  |  -  |  .  |
//                        | CAPS| PAD | ROW |   | SPC | BKSP | ENTER |
                        bindings = < 
   &trans  &kp PG_UP &kp HOME  &kp UP       &kp END   &trans       &kp KP_EQUAL    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0    &kp N4
   &trans &kp PG_DN &kp LEFT  &kp DOWN     &kp RIGHT &trans   &kp KP_ASTERISK &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_SLASH  &kp N7
   &trans &kp LWIN  &kp LS(DEL) &kp LC(INSERT) &kp LS(INSERT) &kp PSCRN     &kp KP_PLUS    &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_MINUS &kp KP_DOT
                                         &trans &trans &trans    &trans &trans &trans
                        >;
                };

        chars_layer {
            label = "NUMROW";
// -----------------------------------------------------------------------------------------
//                 |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//                 |  $   |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  =  |
//                 | PREV| NEXT| PLAY | VUP | VDWN| MUTE|   |BTCLR| BT 1| BT 2| BT 3| BT 4|  %  |
//                                    |CAPS | PAD | ROW |   | SPC | BKSP | ENTER |
                        bindings = <
   &kp F1    &kp F2 &kp F3     &kp F4     &kp F5   &kp F6    &kp F7 &kp F8        &kp F9        &kp F10   &kp F11 &kp F12
   &kp GRAVE &lh_hm LALT N1 &lh_hm LCTRL N2     &lh_hm RALT N3    &lh_hm LSHFT N4   &kp N5    &kp N6 &rh_hm LSHFT N7        &rh_hm RALT N8        &rh_hm LCTRL N9    &rh_hm LALT N0  &kp MINUS
   &kp C_PREV &kp C_NEXT &kp C_PP &kp C_VOL_UP  &kp C_VOL_DN  &kp C_MUTE  &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3   &kp EQUAL
                                     &trans &trans &trans    &trans &trans &trans
         >;
        };

    };
};
